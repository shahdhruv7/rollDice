install.packages("ggplot2")
library(ggplot2)
install.packages("tidyverse")
library("tidyverse", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio/lib/R/library")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
install.packages("bokeh")
ggplot(data = mpg)
mpg
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x=hwy,y=cyl))
ggplot(data = mpg) + geom_point(mapping = aes(y=hwy,x=cyl))
ggplot(data = mpg) + geom_point(mapping = aes(x=drv,y=class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), shape = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'blue'))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'blue')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'dark blue')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'pink')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'salmon pink')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'dark pink')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'green')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), color = 'dark green')
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
library("ggplot2", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio/lib/R/library")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
install.packages("seqinr")
library("seqinr", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio/lib/R/library")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
View(getncbiseq)
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(queryname,thequery)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(queryname,thequery)
# see if a sequence was retrieved:
seq <- getSequence(query$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query$req[1])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query$req[1])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query("queryname","thequery")
# see if a sequence was retrieved:
seq <- getSequence(query$req[1])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
dengueseq <- getncbiseq("NC_001477")
query(queryname,thequery)
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(queryname,thequery)
# see if a sequence was retrieved:
seq <- getSequence(query$req[1])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "DNA"
thequery <- paste("AC=",accession,sep="")
query(queryname,thequery)
# see if a sequence was retrieved:
seq <- getSequence(query$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::available()
library("BiocManager", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio/lib/R/library")
BiocManager::valid()
library(biostring)
library(Biostring)
chooseCRANmirror()
chooseCRANmirror()
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
BiocManager::install(c("GenomicRanges", "Organism.dplyr"))
library(Biostring)
library(Biostrings)
d <- DNAString("C:\\Users\\IISD37\\Downloads\\NC_001477.1.fasta")
d <- DNAString("NC_001477.1.fasta")
d <- DNAString("NC_001477.1.fasta")
d <- DNAString("NC_001477.1.fasta")
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
install.packages("BiocManager")
###################################################
chooseCRANmirror()
1install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(c("GenomicRanges", "Organism.dplyr"))
library(Biostrings)
library(Biostrings)
library("BiocManager", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio-1.1.456/lib/R/library")
library(Biostrings)
s = readDNAStringSet("NC_001477.1.fasta")
View(s)
library(Biostrings)
s = readDNAStringSet("NC_001477.1.fasta")
seq_name = names(s)
sequence = paste(s)
df <- data.frame(seq_name, sequence)
View(df)
install.packages("seqinr")
library("seqinr", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio-1.1.456/lib/R/library")
smallFastaFile <- system.file("C:/Users/IISD37/Downloads/NC_001477.1.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "AA")[[1]]
smallFastaFile <- system.file("C:/Users/IISD37/Downloads/NC_001477.1.fasta", package = "seqinr")
smallFastaFile
mySmallProtein <- read.fasta(file = w+, as.string = TRUE, seqtype = "AA")[[1]]
mySmallProtein <- read.fasta(file = "w+", as.string = TRUE, seqtype = "AA")[[1]]
mySmallProtein <- read.fasta(file = "r", as.string = TRUE, seqtype = "AA")[[1]]
smallFastaFile <- system.file("NC_001477.1.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = "r", as.string = TRUE, seqtype = "AA")[[1]]
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = "r", as.string = TRUE, seqtype = "AA")[[1]]
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "AA")[[1]]
getwd
getwd()
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")[[1]]
s = readDNAStringSet("NC_001477.1.fasta")
View(s)
View(df)
View(s)
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file(r"sequences/NC_001477.1.fasta", package = "seqinr")
smallFastaFile <- system.file("rsequences/NC_001477.1.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta",'r', package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta",'w+', package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta","w+", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta",open = "w+", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta",open = w+, package = "seqinr")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta",open = w+, package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "DNA")
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "Biostrings")
ff=readFasta(file = smallFastaFile)
ff=readFASTA(file = smallFastaFile)
ff=readFASTA(smallFastaFile)
install.packages("BiocManager")
library(Biostrings)
ff=readFASTA("NC_001477.1.fasta")
getwd()
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile)
##################################################
library(seqinr)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile)
##################################################
library(seqinr)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile,as.string= T)
##################################################
library(seqinr)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile,as.string= T)
##################################################
library(seqinr)
smallFastaFile <- system.file("NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile,as.string= T)
ff=read.fasta(file = smallFastaFile, as.string= T)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile,as.string= T)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile)
library(Biostrings)
s = readDNAStringSet("NC_001477.1.fasta")
df <- data.frame(seq_name, sequence)
View(df)
View(s)
View(s)
##################################################
library(seqinr)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta", package = "seqinr")
ff=read.fasta(file = smallFastaFile)
ff <- read.fasta(file = smallFastaFile)
smallFastaFile <- system.file("sequences/NC_001477.1.fasta","w+b" package = "seqinr")
smallFastaFile <- system.file(r"sequences/NC_001477.1.fasta", package = "seqinr")
smallFastaFile <- system.file(R"sequences/NC_001477.1.fasta", package = "seqinr")
View(df)
##################################################
library(seqinr)
smallFastaFile <- open(system.file("sequences/NC_001477.1.fasta", package = "seqinr"),"w+")
smallFastaFile <- open("NC_001477.1.fasta","w+")
smallFastaFile <- open("NC_001477.txt","w+")
smallFastaFile <- file(fname, "w+")
##################################################
library(seqinr)
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("NC_001477.1.fasta", "w+")
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("NC_001477.1.fasta", "w+")
ff <- read.fasta(file = smallFastaFile)
ff <- read.fasta(file = smallFastaFile, as.string = T)
##################################################
library(seqinr)
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("NC_001477.1.fasta", "w+")
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("NC_001477.1.fasta", "w+")
ff <- read.fasta(file = "NC_001477.1.fasta", as.string = T)
##################################################
library(seqinr)
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("C:/Users/IISD37/Documents/NC_001477.1.fasta", "w+")
ff <- read.fasta(file = "NC_001477.1.fasta", as.string = T)
ff <- read.fasta(file = smallFastaFile , as.string = T)
##################################################
library(seqinr)
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("C:/Users/IISD37/Documents/NC_001477.1.fasta", "w+")
ff <- read.fasta(file = smallFastaFile , as.string = T)
##################################################
library(seqinr)
#fname <- "NC_001477.1.fasta"
smallFastaFile <- file("C:/Users/IISD37/Documents/NC_001477.fasta", "r")
ff <- read.fasta(file = smallFastaFile , as.string = T)
View(ff)
biocLite(c( "Biostrings", "GenomicRanges", "IMMAN"))
BiocManager(c( "Biostrings", "GenomicRanges", "IMMAN"))
library("BiocManager", lib.loc="C:/Users/IISD37/Anaconda3/envs/rstudio-1.1.456/lib/R/library")
BiocManager(c( "Biostrings", "GenomicRanges", "IMMAN"))
BiocLite(c( "Biostrings", "GenomicRanges", "IMMAN"))
library(GenomicRanges)
library(GenomicRanges)
setwd("D:\\Dhruv\\packages")
install.packages("rollDice")
install("rollDice")
library(roxygen2)
install("rollDice")
library("devtools")
library(roxygen2)
library("devtools")
install("rollDice")
install("rollingDice")
library(rollingDice)
roll_dice()
install("rollDice")
getwd()
